---
description: 
globs: 
alwaysApply: false
---
You are expected to adhere to these guidelines when working with Prisma ORM. These are derived from official Prisma recommendations and tailored for a T3 Stack environment.

**A. General Principles:**

*   **Prisma Documentation as Truth:** When in doubt, the official Prisma documentation (`@Prisma`) is the ultimate source.
*   **Type Safety:** Leverage Prisma's strong type safety. Avoid `any` types.
*   **Readability:** Write clear Prisma queries and schema definitions.

**B. Schema Design (`prisma/schema.prisma`):**

1.  **Meaningful Naming:** PascalCase for models, camelCase for fields.
2.  **Primary Keys:** Prefer `cuid()` or `uuid()`: `id String @id @default(cuid())`.
3.  **Unique Constraints:** Use `@unique` or `@@unique`.
4.  **Relations:** Define explicitly. Choose referential actions carefully.
5.  **Scalar Types:** Use appropriate Prisma types. Use `@db.VarChar(255)` if needed.
6.  **Enums:** Use Prisma `enum` for predefined sets.
7.  **Timestamps:** Include `createdAt DateTime @default(now())` and `updatedAt DateTime @updatedAt`.
8.  **NextAuth.js Models (If applicable):**
    *   If using NextAuth.js, ensure your schema includes the necessary models (`Account`, `Session`, `User`, `VerificationToken`) as defined in the T3 Stack documentation (`usage/next-auth.mdx`, `usage/prisma.md`) and the project's boilerplate `prisma/schema.prisma`. Pay attention to required fields and relations for the Prisma Adapter.
9.  **Soft Deletes (Optional):** Consider `deletedAt DateTime?` and middleware.
10. **Normalization & DRY:** Keep schemas normalized.
11. **Indexes:** Use `@@index` for frequently queried fields. Use `@@fulltext` if needed.

**C. Prisma Client Usage (in tRPC resolvers, `src/server/api/routers/`):**

1.  **Instantiation:** The Prisma client is instantiated in `src/server/db.ts` and provided as `ctx.db` in tRPC context.
2.  **Type-Safe Operations:** Use generated Prisma Client methods (`findUnique`, `create`, etc.).
3.  **Selecting Fields (`select` and `include`):**
    *   **Be Specific:** Only select needed data with `select`.
    *   Use `include` for related records mindfully.
4.  **Filtering (`where`):** Use comprehensive filter conditions and operators.
5.  **Ordering (`orderBy`):** Use to sort results.
6.  **Pagination (`skip` and `take`):** Implement for `findMany`.
7.  **Transactions:** Use `await ctx.db.$transaction([...])` or `await ctx.db.$transaction(async (tx) => { ... })`.
8.  **Raw Queries (`$queryRaw`, `$executeRaw`):**
    *   **Use Sparingly.** Prefer Prisma Client methods.
    *   Use for specific SQL features or optimizations.
    *   Parameterize carefully (Prisma's tagged template literals or `Prisma.sql`).
9.  **Middleware:** For logging, soft deletes, auditing.
10. **Error Handling:** Catch Prisma-specific errors (e.g., `PrismaClientKnownRequestError` P2002 for unique constraints) and map to `TRPCError`.

**D. Database Migrations (Human-Executed, AI-Identified):**

1.  **Generation:**
    *   When schema changes are needed, note that `pnpm db:generate` (or `prisma migrate dev --name [descriptive-name]`) needs to be run by the human. T3 Stack uses `prisma migrate dev` for development.
    *   Migration names should be descriptive.
2.  **Review:** Human reviews migrations before applying to staging/production.
3.  **Immutability:** Never modify applied migration files. Create new ones.
4.  **Production:** Use `pnpm db:migrate` (or `prisma migrate deploy`).
5.  **DB Push (Development):** `pnpm db:push` can be used in early development to sync schema without creating migration files (as per T3 `usage/first-steps.md`).

**E. Testing Prisma Code:**

1.  **Unit Tests (e.g., for tRPC resolvers):**
    *   Mock Prisma Client (`ctx.db`) using Jest (`jest.mock`, `mockResolvedValue`).
    *   Test success, errors (record not found, unique constraint), edge cases.
2.  **Integration Tests:** Consider a test database.
3.  **Factories:** Use for realistic test data.

**F. Performance Considerations:**

1.  **Avoid N+1 Problems:** Be vigilant with `include`.
2.  **Batch Operations:** Use `createMany`, `updateMany`, `deleteMany` where appropriate.
3.  **Connection Pooling:** Prisma handles this. Ensure DB server is configured.
4.  **Query Logging:** Enable in development via `src/server/db.ts` PrismaClient options.
5.  **Database Indexes:** Crucial for read performance.

**G. Security Best Practices:**

1.  **Input Validation:** Always validate inputs (e.g., Zod in tRPC) *before* Prisma operations.
2.  **Authorization:** Implement in tRPC procedures. Prisma doesn't handle authorization.
3.  **Principle of Least Privilege:** For database users.
4.  **Sensitive Data:** Be cautious with logging.
5.  **Row-Level Security (RLS):** Explore if needed.