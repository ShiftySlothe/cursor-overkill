---
description: Always reference this file if you are looking for existing new files or creating new ones
globs: 
alwaysApply: false
---

# Project Directory Structure

This document outlines the standard directory structure to be followed.

- **`.cursor/`**: Contains all AI-related configurations, rules, and prompts.
    - **`rules/`**: Holds all `.mdc` rule files, categorized by domain.
        - `core/`: Fundamental rules applicable across roles.
        - `ie_ai/`: Rules specific to Implementation Engineers (BE-AI, FE-AI).
        - `knowledge_capture/`: Rules and templates for capturing project knowledge.
        - `leap_ai/`: Rules specific to the LEAP-AI.
        - `pm_ai/`: Rules specific to the PM-AI.
        - `processes/`: Rules defining standard project processes.
        - `sa_ai/`: Rules specific to the SA-AI.
    - **`prompts/`**: Contains master prompts for initializing AI roles.
        - `master/`: Core master prompts.
        - `bootstrap/`: Prompts for initial project setup.
        - `examples/`: Example prompts for various scenarios.
    - `mcp.json`: (If used) Configuration for MCP servers.

- **`docs/`**: All project documentation.
    - **`prd_archive/`**: Archived versions of the Product Requirements Document.
    - `architecture.md`: Describes the system architecture.
    - `product_requirement_docs.md`: The main PRD file.
    - `technical.md`: Details the technical stack, patterns, and constraints.

- **`prisma/`**: Prisma ORM related files.
    - `schema.prisma`: The Prisma schema definition.
    - `migrations/`: Database migration files generated by Prisma.

- **`src/`**: Application source code.
    - **`app/`**: Next.js App Router specific files and route definitions.
        - `(route-group-name)/`: Optional route groups.
            - `_components/`: React components (Server or Client) specific to this route segment.
            - `layout.tsx`: Layout component for the segment.
            - `page.tsx`: Page component for the segment.
            - `loading.tsx`: Loading UI component.
            - `error.tsx`: Error UI component (must be a Client Component).
            - `not-found.tsx`: Not Found UI component.
            - `template.tsx`: Template component for the segment.
        - `api/`: Route Handlers, including the tRPC endpoint.
            - `auth/[...nextauth]/route.ts`: NextAuth.js route handler.
            - `trpc/[trpc]/route.ts`: tRPC HTTP request handler.
        - `layout.tsx`: Root layout component.
        - `page.tsx`: Root page component (homepage).
    - **`components/`**: Globally reusable UI components.
        - `ui/`: Directory for ShadCN/UI components (or customized versions).
        - *Other custom reusable components.*
    - **`lib/`**: Utility functions, helper scripts, constants.
        - `schemas/`: (Optional) Centralized Zod schemas.
    - **`server/`**: Backend-specific code.
        - `api/`: tRPC router definitions.
            - `routers/`: Individual tRPC feature routers (e.g., `post.ts`).
            - `root.ts`: The main `appRouter` merging all feature routers.
            - `trpc.ts`: tRPC server initialization, context creation, and base procedure definitions.
        - `auth/`: NextAuth.js server-side configuration.
            - `config.ts`: NextAuth.js configuration object.
            - `index.ts`: Exports auth utilities.
        - `db.ts`: Prisma client instantiation and global export.
        - `services/`: (Optional) For more complex business logic separated from tRPC resolvers.
    - **`styles/`**: Global CSS styles (e.g., `globals.css`).
    - **`trpc/`**: tRPC client-side setup.
        - `query-client.ts`: TanStack Query `QueryClient` factory.
        - `react.tsx`: `TRPCReactProvider` and the `api` object for client-side tRPC hook usage.
        - `server.ts`: Server-side tRPC caller utilities for React Server Components.
    - `env.js`: Environment variable schema and validation (using `@t3-oss/env-nextjs`).

- **`tasks/`**: Planning and task management artifacts.
    - `proposals/`: Technical Design Proposals (TDPs).
    - `sprints/`: Sprint-specific planning documents.
        - `sprint_[YYYY-MM-DD]_[goal_identifier]/`: Directory for a specific sprint.
            - `be_tasks.md`: Backend tasks for the sprint.
            - `fe_tasks.md`: Frontend tasks for the sprint.
            - `sprint_YYYY-MM-DD_goal_identifier.md`: The main sprint plan document.
    - `active_context.md`: Snapshot of the current development focus.
    - `epics_plan.md`: High-level epics and their status.
- **Root Files**:
    - `.env.example`: Template for environment variables.
    - `.gitignore`: Specifies intentionally untracked files.
    - `eslint.config.js`: ESLint configuration.
    - `next.config.js`: Next.js configuration.
    - `package.json`: Project metadata and dependencies.
    - `postcss.config.js`: PostCSS configuration.
    - `prettier.config.js`: Prettier configuration.
    - `README.md`: Project overview and setup instructions.
    - `tsconfig.json`: TypeScript configuration.
