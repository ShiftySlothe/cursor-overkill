---
description: 
globs: 
alwaysApply: false
---
# tRPC Best Practices (v11+, Next.js App Router, TanStack Query v5+, T3 Stack Aligned)

Adhere to these guidelines for tRPC development within a T3 Stack project.

**A. Core tRPC Concepts:** (As originally defined)
*   Routers, Procedures, Context, Middleware, Adapters, Links, Input/Output Validation, Data Transformers.

**B. T3 Stack Project Structure (Illustrative for tRPC):**
src/
├── app/
│   ├── api/
│   │   └── trpc/
│   │       └── [trpc]/
│   │           └── route.ts # Next.js App Router API handler
│   └── (features)/
│       └── _components/ # Client components
│       └── page.tsx     # Server components
├── trpc/                # tRPC client-side setup
│   ├── query-client.ts  # QueryClient factory
│   ├── react.tsx        # TRPCReactProvider, api object
│   └── server.ts        # RSC helpers (api, HydrateClient)
├── server/
│   └── api/
│       ├── trpc.ts      # initTRPC, procedure helpers, middleware
│       ├── root.ts      # Main appRouter, createCallerFactory
│       └── routers/     # Sub-routers (e.g., post.ts)
│   ├── auth/            # NextAuth.js setup
│   │   ├── config.ts
│   │   └── index.ts
│   └── db.ts            # Prisma client
└── prisma/
    └── schema.prisma

**C. Server-Side Best Practices (`src/server/api/`):**

1.  **Initialization (`trpc.ts`):**
    *   Use `initTRPC.context<ContextType>().create({ transformer: superjson, ... })`. T3 boilerplate uses `superjson`.
    *   Export base procedures: `publicProcedure`, `protectedProcedure` (using auth middleware).
    *   Export `createTRPCRouter = t.router`, `createCallerFactory = t.createCallerFactory`.
    *   The T3 boilerplate includes a `timingMiddleware`; if used, apply it to base procedures.
2.  **Context (`trpc.ts` based on T3 boilerplate):**
    *   `createTRPCContext` function (example in T3's `src/server/api/trpc.ts`):
        ```typescript
        // Simplified from T3 boilerplate
        export const createTRPCContext = async (opts: { headers: Headers }) => {
          const session = await auth(); // from ~/server/auth (NextAuth.js)
          return {
            db, // from ~/server/db (Prisma)
            session,
            ...opts,
          };
        };
        ```
    *   Export `Context` type: `export type Context = Awaited<ReturnType<typeof createTRPCContext>>;`.
3.  **Routers (`root.ts`, `routers/*.ts`):**
    *   Organize into feature-specific routers. Merge into `appRouter` in `root.ts`.
4.  **Procedures:**
    *   Use `publicProcedure.query()`, `mutation()`, etc.
    *   Input validation with `.input(zodSchema)`. Optional output validation.
5.  **Input/Output Validation (Zod):** Define schemas for all inputs.
6.  **Error Handling:**
    *   Throw `TRPCError` (e.g., `UNAUTHORIZED`, `NOT_FOUND`).
    *   Use `onError` in `fetchRequestHandler` (`app/api/trpc/[trpc]/route.ts`) for global error logging.
    *   T3 boilerplate's `trpc.ts` includes ZodError formatting in `errorFormatter`.
7.  **Middleware:**
    *   Define with `t.middleware()`. Apply with `.use()`.
    *   `protectedProcedure` in T3 uses a middleware to check `ctx.session.user`.

**D. Client-Side Best Practices (Next.js App Router & TanStack Query v5+ - T3 Stack):**

1.  **Setup (`src/trpc/` directory):**
    *   **`query-client.ts`**: Exports `createQueryClient()` creating `QueryClient` instances. Configures `superjson` for de/serialization.
    *   **`react.tsx`**:
        *   `'use client';`
        *   `api = createTRPCReact<AppRouter>();`
        *   Implements `TRPCReactProvider` managing `QueryClient` and `trpcClient` (using `httpBatchStreamLink` with `SuperJSON`, URL to `/api/trpc`).
        *   Exports `RouterInputs`, `RouterOutputs`.
        *   Mount `TRPCReactProvider` in `src/app/layout.tsx`.
    *   **`server.ts`**:
        *   `'server-only';`
        *   `createContext` (RSC version), `getQueryClient` (cached), `caller`.
        *   Exports `api` (server-side caller proxy) and `HydrateClient` from `createHydrationHelpers`.
2.  **Fetching Data in Server Components (`app/page.tsx`, etc.):**
    *   Use `const session = await auth();` for session data.
    *   Use `api.procedure.query()` (from `~/trpc/server`) to fetch data.
    *   Prefetch with `void api.procedure.prefetch()`.
    *   Wrap page/layout with `HydrateClient` from `~/trpc/server`.
3.  **Fetching Data in Client Components (`app/_components/*.tsx`):**
    *   `'use client';`
    *   `import { api } from "~/trpc/react";`
    *   Use TanStack Query hooks via `api` object:
        *   `api.path.to.procedure.useQuery(input, options)`
        *   `api.path.to.procedure.useSuspenseQuery(input, options)`
        *   `api.path.to.procedure.useInfiniteQuery(input, { getNextPageParam, ... })`
        *   `api.path.to.procedure.useMutation(options)`
    *   Use `const utils = api.useUtils();` for invalidation (e.g., `utils.post.invalidate()`).
4.  **Mutations:** As per general TanStack Query / tRPC patterns. Invalidate using `utils`.
5.  **Streaming & Subscriptions:** As per general tRPC.

**E. Advanced Topics & Other Considerations:** (As originally defined, adapted for T3 paths if needed)
*   Non-JSON Content Types.
*   Server-Side Calls (using `createCaller` from `src/server/api/root.ts`).
*   Caching.
*   Security (auth middleware via `protectedProcedure`).

**F. Version Compatibility & Further Resources:**
*   tRPC v11+, TanStack Query v5+.
*   T3 Stack Docs (`usage/trpc.md`).
*   Official tRPC & TanStack Query Docs.