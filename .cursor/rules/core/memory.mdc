---
description: 
globs: 
alwaysApply: true
---
---
description: Defines the project's memory structure, emphasizing the hierarchy and purpose of key documentation and planning files.
globs:
alwaysApply: true # This map is fundamental for all roles.
---

# Project Memory Structure and Principles (Next.js App Router Focused)

This project relies on a structured set of documents to maintain context, guide development, and capture knowledge. All AI roles must be familiar with this structure. These are living documents and should reflect the most current understanding and state of the project. The `README.md` file in the project root provides a human-readable overview of this workflow. All file paths and naming conventions must adhere to @directory_structure and @file_naming.

**Core Document Hierarchy and Workflow Diagram:**

```mermaid
graph TD
    A[User Input/Feature Idea] --> B(PM-AI);
    B -- Generates/Updates (per @prd_generation) --> PRD[docs/product_requirement_docs.md];
    B -- Archives (per @prd_generation, @file_naming) --> PRD_Archive[docs/prd_archive/];

    PRD --> C(SA-AI);
    C -- Reads --> Arch_Current[docs/architecture.md - Adheres to @nextjs_app_router_best_practices];
    C -- Reads --> Tech_Current[docs/technical.md - Adheres to @nextjs_app_router_best_practices, @trpc_best_practices, @prisma_best_practices];
    C -- Reads --> CodeBase[app/src - Existing code, per @directory_structure];
    C -- Reads --> DirStructureRule[ @directory_structure ];
    C -- Reads --> NextJsBPRule[ @nextjs_app_router_best_practices ];
    C -- Reads --> PrismaBPRule[ @prisma_best_practices ];
    C -- Reads --> TrpcBPRule[ @trpc_best_practices ];
    C -- Generates (per @tdp_generation, @file_naming) --> TDP[tasks/proposals/technical_design_proposal_[feature].md];

    TDP --> D(LEAP-AI);
    D -- Updates (per @planning) --> Epics[tasks/epics_plan.md];
    D -- Generates/Updates (per @planning, @file_naming) --> SprintPlan[tasks/sprints/sprint_[date_goal].md];
    SprintPlan -- Leads to (per @planning) --> BE_Tasks[tasks/sprints/sprint_[date_goal]/be_tasks.md];
    SprintPlan -- Leads to (per @planning) --> FE_Tasks[tasks/sprints/sprint_[date_goal]/fe_tasks.md];
    D -- Initializes/Updates (per @active_context_management) --> ActiveContext[tasks/active_context.md];

    BE_Tasks --> E_BE(BE-AI);
    FE_Tasks --> F_FE(FE-AI);
    E_BE -- Implements & Tests (per @backend, @tdd, @prisma_best_practices, @trpc_best_practices) --> CodeChanges_BE[app/src (Backend)];
    F_FE -- Implements & Tests (per @frontend, @tdd, @nextjs_app_router_best_practices, @trpc_best_practices) --> CodeChanges_FE[app/src (Frontend)];
    E_BE -- Updates Status & --> ActiveContext;
    F_FE -- Updates Status & --> ActiveContext;

    CodeChanges_BE --> ReviewProcess(Human orchestrates SRE-Gemini Review);
    CodeChanges_FE --> ReviewProcess;
    ReviewProcess -- Feedback --> Human_For_Task_Update[Human updates Task Status/Creates new tasks];

    MergedCode[Merged Code (Main Branch - Human Action)] --> D_DocUpdate(LEAP-AI for Doc Updates as per @documentation_update);
    D_DocUpdate -- Proposes Updates --> Arch_Update_Proposal[Proposal for docs/architecture.md];
    D_DocUpdate -- Proposes Updates --> Tech_Update_Proposal[Proposal for docs/technical.md];
    Arch_Update_Proposal --> Human_Applies_Doc_Update1[Human updates docs/architecture.md];
    Tech_Update_Proposal --> Human_Applies_Doc_Update2[Human updates docs/technical.md];

    subgraph SharedKnowledgeBase [Shared Knowledge - All AIs Read, Human Curates based on AI suggestions via @rule_update_procedure]
        CoreRulesDir[.cursor/rules/core/ (includes @nextjs_app_router_best_practices, @prisma_best_practices, @trpc_best_practices, @directory_structure, @file_naming, etc.)];
        ProcessRulesDir[.cursor/rules/processes/];
        KnowledgeRulesDir[.cursor/rules/knowledge_capture/ (@lessons_learned, @error_documentation)];
    end

    style PRD fill:#90EE90,stroke:#333,stroke-width:2px;
    style TDP fill:#ADD8E6,stroke:#333,stroke-width:2px;
    style SprintPlan fill:#FFFFE0,stroke:#333,stroke-width:2px;
    style BE_Tasks fill:#FFB6C1,stroke:#333,stroke-width:2px;
    style FE_Tasks fill:#FFB6C1,stroke:#333,stroke-width:2px;
    style Arch_Current fill:#DDA0DD,stroke:#333,stroke-width:2px;
    style Tech_Current fill:#DDA0DD,stroke:#333,stroke-width:2px;
    style ActiveContext fill:#E0FFFF,stroke:#333,stroke-width:2px;
    style Epics fill:#D3D3D3,stroke:#333,stroke-width:2px;
    style SharedKnowledgeBase fill:#FFFACD,stroke:#333,stroke-width:2px;

    
Key Document Buckets & Primary AI Interactions (Next.js App Router Focused):
Refer to @directory_structure for file locations.
AI Guidance & Knowledge Base (.cursor/):
prompts/master/: Master system instructions for each AI role.
rules/: All rule files, categorized.
core/: Contains fundamental guiding principles and best practices including @nextjs_app_router_best_practices, @prisma_best_practices, @trpc_best_practices, @directory_structure, @file_naming.
Role-specific rules (e.g., @prd_generation for PM-AI).
Process rules (e.g., @git_workflow, @documentation_update).
Knowledge capture templates (@lessons_learned, @error_documentation).
Project Definition & Design (docs/):
product_requirement_docs.md: The "what" and "why" (PM-AI generates per @prd_generation).
prd_archive/: Historical PRDs.
architecture.md: Current system architecture (SA-AI initially proposes; LEAP-AI proposes updates per @documentation_update; Human finalizes). Must reflect practices from @nextjs_app_router_best_practices.
technical.md: Current tech stack, core patterns, and constraints (SA-AI initially proposes; LEAP-AI proposes updates per @documentation_update; Human finalizes). Must reflect practices from relevant core rules.
Planning & Task Management (tasks/):
proposals/technical_design_proposal_[feature].md: Detailed technical solution design (SA-AI generates per @tdp_generation).
epics_plan.md: High-level feature themes (LEAP-AI manages per @planning).
sprints/sprint_[date_goal].md & sub-task files: Sprint-level plans (LEAP-AI generates per @planning).
active_context.md: Current sprint focus (LEAP-AI initializes per @active_context_management).
Application Code (app/src & prisma/):
Code implementation adhering to all relevant best practice documents (e.g., @nextjs_app_router_best_practices, @prisma_best_practices, @trpc_best_practices) and role-specific guidelines (@frontend, @backend).

