---
description: 
globs: 
alwaysApply: false
---
# Epic, Sprint, and Task Planning (Next.js App Router Focused)

Your primary responsibility is to translate an approved Technical Design Proposal (TDP) into a hierarchical set of plans. This process must adhere to @planning_principles. All file/directory creation must follow @file_naming and @directory_structure.

**Overall Planning Workflow:**

1.  **Input Review:**
    *   Thoroughly review the approved TDP from `tasks/proposals/`. Pay close attention to strategies guided by @nextjs_app_router_best_practices, @prisma_best_practices, and @trpc_best_practices.
    *   Reference `docs/product_requirement_docs.md`, `docs/architecture.md`, and `docs/technical.md`.
    *   Use `@Docs [FrameworkName] [query]` for framework-specific planning considerations.

2.  **Identify Reusable Code & Patterns:**
    *   Analyze existing code in `src/` (per @directory_structure) for reusable assets (utilities, services, tRPC procedures, Server/Client Components).
    *   Document identified reusable assets for explicit mention in task descriptions.
    *   Present this list to the user for confirmation and guidance.

3.  **Update `tasks/epics_plan.md` (if necessary):**
    *   Define/update Epics based on TDP/PRD. Link to PRD sections. Update statuses.

4.  **Sprint Planning - Create Sprint Plan File:**
    *   Define Sprint Goal. Create sprint plan file (e.g., `tasks/sprints/sprint_YYYY-MM-DD_sprint-goal/sprint_YYYY-MM-DD_sprint-goal.md`) per @file_naming.
    *   **Contents of Sprint Plan:**
        *   Sprint Goal, Linked Epics, Planned User Stories.
        *   High-Level Task Overview & Dependencies (distinguishing BE/FE, referencing reusables, outlining data flow per @nextjs_app_router_best_practices and @trpc_best_practices).
        *   QA Tasks, Branch Setup Task (@git_workflow), Documentation Update Task (@documentation_update).

5.  **Detailed Role-Specific Task List Generation:**
    *   Based on the sprint plan, create/update `be_tasks.md` and `fe_tasks.md` in the sprint directory.
    *   **Decomposition:**
        *   **For FE Tasks:** Clearly specify Server/Client Component type. Detail data sources/mutation strategy per @nextjs_app_router_best_practices and @trpc_best_practices (Section D). Detail UI elements. **Explicitly suggest specific ShadCN/UI components** to be used, or instruct FE-AI to identify them if TDP is less specific.
        *   **For BE Tasks:** Detail tRPC procedure requirements (inputs, outputs, Prisma ops) per @trpc_best_practices (Section C) and @prisma_best_practices.
        *   Explicitly note reusable assets in task descriptions.
    *   **Task Attributes:** ID, Description (mention reusables, Server/Client type for FE, data strategy), Assigned Role, Dependencies, Status, Deliverables, Acceptance Criteria, Unit Test Requirement (referencing @tdd, specify focus for Server/Client components if FE), DoD.

6.  **Review and User Guidance:**
    *   Present draft sprint plan, reusable assets list, and task lists for user review.
    *   User confirms reusable code.
    *   If task breakdown, dependencies, role assignments, or Server/Client strategy decisions are complex/ambiguous, **seek user guidance.**

**Definition of Done for Planning Phase:**
*   `tasks/epics_plan.md` is up-to-date.
*   New sprint plan file and role-specific task files (BE/FE) are created, approved, and adhere to conventions.
*   Reusable code assets are documented and confirmed.
*   Tasks clearly define requirements, referencing relevant best practices (e.g., @nextjs_app_router_best_practices for FE tasks).
*   `tasks/active_context.md` updated per @active_context_management.
*   Inform user that planning is complete.