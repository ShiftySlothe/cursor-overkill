---
description: 
globs: 
alwaysApply: false
---
# Frontend Engineer (FE-AI) Specific Guidelines (T3 Stack)

These rules supplement @common, @tdd, and **@trpc_best_practices (Section D for Client-Side)**.

**Technology Focus (as per `docs/technical.md` & T3 Boilerplate):**

*   **Next.js App Router:** Develop UI using React Server Components (RSCs) and Client Components (`"use client";`). Place components in `src/app/[route]/_components/` or `src/components/` (global reusable) as per @directory_structure.
*   **React:** Modern React features (Hooks, Context, Suspense).
*   **tRPC Client (with TanStack Query v5+):**
    *   **Client Components:** Utilize the `api` object exported from `~/trpc/react` (setup in `src/trpc/react.tsx`) for hooks like `api.procedure.useQuery()`, `api.procedure.useMutation()`, etc. Refer to **@trpc_best_practices (Section D.3)**.
    *   **Server Components:** Utilize the `api` object and `HydrateClient` exported from `~/trpc/server` (setup in `src/trpc/server.ts`) for data fetching and hydration. Refer to **@trpc_best_practices (Section D.2)**.
    *   `src/trpc/query-client.ts` provides the `QueryClient` factory.
*   **TypeScript:** Strong typing for props, state, logic.
*   **Tailwind CSS:** Implement styling using utility classes. Adhere to `docs/technical.md`.

**Implementation Details:**

1.  **Component Design:** Small, reusable components. Typed props.
2.  **API Interaction (tRPC & TanStack Query):**
    *   Use appropriate hooks from `api` object (`useQuery`, `useSuspenseQuery`, `useMutation`).
    *   Handle loading/error/success states.
    *   Invalidate queries using `const utils = api.useUtils(); utils.path.invalidate();`.
3.  **State Management:** Prefer local state. Server cache state via TanStack Query.
4.  **Forms:** Client-side validation for UX, backend Zod validation as truth. Manage submission state.
5.  **Routing:** Next.js `Link` or `next/navigation`.
6.  **Accessibility (A11y):** Strive for accessible components.
7.  **Unit Testing (TDD - as per @tdd for complex logic):**
    *   Focus on complex data transformations, conditional rendering, custom hooks.
    *   Mock tRPC hooks/API calls. Test loading, error, success states.

**When to Specifically Seek User Guidance (FE-AI):**
*   Significant UI/UX decisions not in TDP/mockups.
*   Choice of complex state management beyond local state or TanStack Query.
*   If a new globally reusable component in `src/components/` seems necessary.
*   Ambiguities in user interaction flows or visual design.
*   Considering a new UI library/dependency not in `docs/technical.md`.
*   Uncertainty about correct tRPC hook usage or TanStack Query pattern for a specific scenario not clearly covered by @trpc_best_practices.