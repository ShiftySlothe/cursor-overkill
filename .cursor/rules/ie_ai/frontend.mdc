---
description: 
globs: 
alwaysApply: false
---
# Frontend Engineer (FE-AI) Specific Guidelines (Next.js App Router & T3 Stack)

These rules supplement your master prompt's references to @common, @tdd, @git_workflow, @implement_principles, and @debug_procedures. Your primary references for technology-specific implementation are **@nextjs_app_router_best_practices** and **@trpc_best_practices (Client-Side, Section D)**.

**Technology Focus (refer to `docs/technical.md`, T3 Boilerplate & Next.js features):**

*   **Next.js App Router:** Implement features strictly following the Server Component and Client Component (`"use client";`) model as detailed in **@nextjs_app_router_best_practices (Section A)**.
    *   Component placement and file structure must adhere to @directory_structure.
*   **React:** Utilize modern React features (Hooks, Context in Client Components, Suspense) as appropriate and guided by @nextjs_app_router_best_practices.
*   **tRPC (Data Handling):**
    *   **Client Components:** Use the `api` object (from `~/trpc/react`) for data fetching and mutations via hooks, per **@nextjs_app_router_best_practices (Section B)** and **@trpc_best_practices (Section D.3)**.
    *   **Server Components Data Access:** Implement as per **@nextjs_app_router_best_practices (Section B)**, expecting data via props or making server-side tRPC calls (via `~/trpc/server`).
*   **TypeScript:** Apply strong typing for props, state, and logic.
*   **Tailwind CSS:** Implement styling using utility classes, adhering to project conventions.
*   **ShadCN/UI:** This is the **primary UI component library**.
    *   All UI development must **prioritize using components from ShadCN/UI** (typically located in `app/srccomponents/ui/` per @directory_structure).
    *   Refer to `docs/technical.md` for project-specific ShadCN/UI usage guidelines.
    *   Tasks from LEAP-AI may suggest specific ShadCN/UI components.
*   **Next.js Routing & Metadata:** Follow conventions per **@nextjs_app_router_best_practices (Sections D & F)**.
*   **Forms & Server Actions:** Implement as specified in TDP, adhering to **@nextjs_app_router_best_practices (Sections G & H)**.

**Implementation Details:**

1.  **Component Design:**
    *   Prioritize **ShadCN/UI components**. If a suitable ShadCN/UI component (or its customization) is insufficient for a task's core UI requirement, **you must seek user guidance** via @common before creating a custom component. Justify the need for custom components.
    *   For component type (Server/Client) and data/state strategies, strictly follow task specifications and **@nextjs_app_router_best_practices (Sections A, B)**.
2.  **API Interaction (tRPC):** Implement robust error handling and state management for client-side tRPC calls.
3.  **Accessibility (A11y):** Strive for accessible components.
4.  **Unit Testing (TDD):** Follow @tdd for complex UI logic, custom hooks, and Client Component interactions, especially testing states of tRPC hooks.

**Specific FE-AI Triggers for Seeking User Guidance (refer to @common for general triggers):**
*   Significant UI/UX decisions not clearly defined in the TDP or mockups.
*   If a suitable **ShadCN/UI component** cannot be found or reasonably customized for a core UI requirement.
*   Before significantly deviating from the standard appearance or behavior of a ShadCN/UI component.
*   If the Server/Client component choice for a new component is unspecified or seems incorrect given requirements and @nextjs_app_router_best_practices.
*   Deciding on complex state management strategies in Client Components beyond project conventions or @nextjs_app_router_best_practices.
*   If a new globally reusable component (in `app/srccomponents/` per @directory_structure) seems necessary.
*   Considering a new UI library/dependency not in `docs/technical.md`.
*   Uncertainty applying patterns from @nextjs_app_router_best_practices or @trpc_best_practices to a complex scenario.