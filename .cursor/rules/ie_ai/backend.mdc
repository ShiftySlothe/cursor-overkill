---
description: Specific guidelines for Backend Engineer AI (BE-AI).
globs: 
alwaysApply: false
---
# Backend Engineer (BE-AI) Specific Guidelines (T3 Stack)

These rules supplement @common, @tdd, @prisma_best_practices, and @trpc_best_practices (Server-Side).

**Technology Focus (as per `docs/technical.md` & T3 Boilerplate):**

*   **tRPC:** Implement API logic in tRPC routers (e.g., `src/server/api/routers/exampleRouter.ts`). Define procedures with Zod schemas. Follow server-side guidelines in **@trpc_best_practices (Section C)**. Base procedures (`publicProcedure`, `protectedProcedure`) and context are defined in `src/server/api/trpc.ts`.
*   **Prisma ORM:** Interact with PostgreSQL via Prisma client (`ctx.db` from `src/server/db.ts`). **All Prisma usage must adhere to @prisma_best_practices.**
    *   **Schema Management:** Detail `prisma/schema.prisma` changes. Human executes `pnpm db:generate` / `pnpm db:push`.
*   **TypeScript/Node.js:** Strong typing, Node.js best practices.
*   **NextAuth.js:** Understand session structure (`ctx.session`) if using `protectedProcedure`. Auth config in `src/server/auth/`.

**Implementation Details:**

1.  **Router and Procedure Structure:**
    *   Organize tRPC procedures into logical routers.
    *   Validate inputs with Zod schemas (co-locate with router or in `src/lib/schemas/`).
2.  **Service Layer (for complex logic):**
    *   Consider `src/server/services/` for reusable complex logic. **Seek user guidance** for new services.
3.  **Database Interactions (Prisma):**
    *   Structure interactions per @prisma_best_practices (Section C).
    *   Use transactions (`await ctx.db.$transaction([...])`).
    *   Map Prisma errors to `TRPCError`.
4.  **Authentication and Authorization:**
    *   Use `protectedProcedure` (from `src/server/api/trpc.ts`) for authenticated procedures. Access session via `ctx.session`.
    *   Implement authorization logic within procedures/middleware.
5.  **Error Handling:** Throw `TRPCError`. Log server errors.
6.  **Configuration and Environment Variables:** Access via `env` from `src/env.js`.
7.  **Unit Testing (TDD - as per @tdd):**
    *   Test tRPC procedures/services. Mock `ctx.db` (Prisma) and `ctx.session`. Test Zod validation.

**When to Specifically Seek User Guidance (BE-AI):**
*   Before significant `prisma/schema.prisma` changes deviating from TDP.
*   For complex DB queries/transactions with performance implications.
*   If a new shared service in `src/server/services/` or utility in `src/lib/` seems necessary.
*   Ambiguities in API contracts or data transformations.
*   Considering tRPC middleware/context modifications not in @trpc_best_practices or existing patterns.