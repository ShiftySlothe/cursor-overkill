---
description: 
globs: 
alwaysApply: false
---
# Test-Driven Development (TDD) with Jest (Next.js App Router Aware)

For tasks requiring unit tests (as specified in your task's "Unit Test Requirement"), you must follow a Test-Driven Development approach. All tests will use the Jest testing framework (as specified in `docs/technical.md`) and be written in TypeScript (`*.test.ts` or `*.spec.ts`). Consult @nextjs_app_router_best_practices for context on Server/Client component behaviors that influence testing.

**TDD Cycle (Red-Green-Refactor):**

1.  **RED - Write a Failing Test:**
    *   **Propose Test Cases:** Before writing any implementation code, analyze the requirement and **propose a set of test cases in plain language**. These should cover:
        *   Happy path / expected behavior.
        *   Edge cases.
        *   Invalid inputs / error conditions.
        *   Specific business logic paths.
        *   **For tRPC procedures (BE-AI):** Test different context states, Prisma interactions (mocked).
        *   **For Client Components (FE-AI):** Test UI rendering based on props/state, event handler logic, interaction with tRPC hooks (loading, success, error states). (See @nextjs_app_router_best_practices Section A & B).
        *   **For Server Components (FE-AI, if complex UI logic):** Test conditional rendering based on props or data. (See @nextjs_app_router_best_practices Section A & B).
    *   **Seek User Approval for Test Cases:** Present your proposed test cases to the user. **Do not proceed to write test code until the user approves the test cases.**
    *   **Write Test Code:** Once test cases are approved, write Jest test code for *one specific piece of functionality* or *one specific test case*.
        *   Ensure the test clearly describes what it's testing.
        *   Make assertions that will initially fail.
        *   Place test files as per project convention and @file_naming.

2.  **GREEN - Write Code to Make the Test Pass:**
    *   Write the *minimum amount* of implementation code necessary to make the failing test pass.

3.  **REFACTOR - Improve the Code:**
    *   Once the test passes, refactor both implementation and test code, following @implement_principles.
    *   Improve clarity, remove duplication, enhance performance, etc., ensuring tests still pass.

**Repeat:** Continue this cycle until the task's unit test requirements are met.

**General Jest Test Guidelines (refer to `docs/technical.md`):**

*   **`describe` Blocks:** Group related tests.
*   **`it` or `test` Blocks:** Define individual test cases with clear names.
*   **Assertions:** Use Jest's built-in matchers.
*   **Mocking:** Use Jest's mocking capabilities (`jest.fn()`, `jest.spyOn()`, `jest.mock()`).
    *   **tRPC Procedures (BE-AI):** Mock Prisma client (`ctx.db`) and session context (`ctx.session`) as per @prisma_best_practices (Section E) and **@trpc_best_practices**.
    *   **Client Components using tRPC Hooks (FE-AI):** Mock tRPC client/hooks (e.g., mock `api.procedure.useQuery` to return specific states). `@testing-library/react` is key.
    *   **Server Components making tRPC calls (FE-AI):** Mock the tRPC server-side client or the specific tRPC procedure.
*   **Setup and Teardown:** Use `beforeEach`, `afterEach`, `beforeAll`, `afterAll`.
*   **Asynchronous Tests:** Handle promises correctly with `async/await`.

**Definition of Done for TDD within a Task:**
*   All approved unit test cases are implemented and pass.
*   Implementation code satisfies requirements and is refactored.

**Seeking User Guidance:**
*   If unsure how to test specific logic (complex tRPC, Server/Client Components with data dependencies, interactive Client Components).
*   If mocking complex dependencies is difficult.
*   If a user-proposed test case seems problematic.