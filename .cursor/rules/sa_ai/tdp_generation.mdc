---
description: 
globs: 
alwaysApply: false
---
# Technical Design Proposal (TDP) Generation (Next.js App Router Focused)

Your primary output is a Technical Design Proposal (TDP). This document details the high-level technical solution for the requirements outlined in `docs/product_requirement_docs.md`. The TDP serves as the blueprint for the Lead Engineer / Agile Planner AI (LEAP-AI).
This process must adhere to the universal tenets outlined in @planning_principles.

**Procedure:**

1.  **Input Analysis:**
    *   Thoroughly review the approved `docs/product_requirement_docs.md`.
    *   Carefully analyze the current system architecture documented in `docs/architecture.md`.
    *   Understand the existing technology stack, patterns, and constraints outlined in `docs/technical.md`.
    *   **Crucially, understand and apply principles from @nextjs_app_router_best_practices.**
    *   Review the codebase in `src/` for existing patterns, reusable components (Server and Client), and modules. Use `@Docs Next.js [query]`, `@Docs tRPC [query]`, or similar for framework specifics if needed.
    *   Consult @directory_structure for file organization conventions.
    *   Consult **@prisma_best_practices** if the feature involves database interaction.
    *   Consult **@trpc_best_practices** for API design.
    *   Reference @system_analysis for guidance on analysis.
    *   Ensure your approach aligns with @planning_principles.

2.  **TDP Document Creation:**
    *   Create a new TDP file in `tasks/proposals/` using the naming convention: `technical_design_proposal_[feature-name]_[YYYY-MM-DD].md` (as per @file_naming). Replace `[feature-name]` with a concise identifier for the feature and use the current date.
    *   The TDP must include the following sections:

        *   **1. Introduction:**
            *   Brief overview of the feature being addressed (link to or summarize from `docs/product_requirement_docs.md`).
            *   Purpose of this TDP.
        *   **2. Proposed Technical Solution:**
            *   **High-level description:** How the feature will be implemented within the Next.js App Router architecture.
            *   **Component Strategy (Server vs. Client):** Following @nextjs_app_router_best_practices (Section A), identify key new/modified components, specify if they are Server or Client Components, and justify Client Component choices based on interactivity or browser API needs.
            *   **Architectural changes:** Detail any new components, services, or modules required. Illustrate with Mermaid diagrams if complex, showing interaction between Server Components, Client Components, and tRPC API. Explain how they integrate with `docs/architecture.md`.
            *   **Data Model Changes (Prisma):**
                *   Specify any new database tables/models, columns, or relationships for Prisma.
                *   **All Prisma schema design proposals must align with @prisma_best_practices (Section B).**
            *   **API Design (tRPC):**
                *   Outline new or modified tRPC procedures (queries/mutations), their Zod input schemas, and high-level outputs.
                *   Specify if procedures are public or protected (requiring authentication).
                *   **All tRPC API design proposals must align with @trpc_best_practices (Sections C & D).**
            *   **Data Fetching Strategy:** Describe how data will be fetched for this feature, adhering to @nextjs_app_router_best_practices (Section B). Detail specific tRPC procedures used by Server Components (server-side calls) and Client Components (hooks), including any initial data hydration patterns for Client Components.
            *   **Caching Strategy (Data Layer):** Propose caching strategies for data fetched by this feature, adhering to @nextjs_app_router_best_practices (Section C). Specify use of `unstable_cache` for tRPC calls if persistent caching beyond a render pass is needed, or relevant `fetch` options.
            *   **State Management:** Clarify where state resides, following @nextjs_app_router_best_practices (Section A).
            *   **Forms and Mutations:** Propose form handling mechanisms (Server Actions calling tRPC, or tRPC hooks in Client Components) as per @nextjs_app_router_best_practices (Section G & H).
            *   **Loading UI and Error Handling:** Briefly outline how `loading.js` and `error.js` will be utilized for the feature's routes, aligning with @nextjs_app_router_best_practices (Section E).
            *   **Key algorithms or logic flows.**
        *   **3. Impact on Existing System:**
            *   Identify which existing modules, components (Server/Client), services, or tRPC routers/procedures will be affected.
            *   Describe the nature of the impact (e.g., modification, extension, deprecation).
        *   **4. Technology & Patterns:**
            *   Confirm adherence to `docs/technical.md` and @nextjs_app_router_best_practices.
            *   If new technologies, libraries, or significant design patterns are proposed (and not already in `docs/technical.md` or diverging from @nextjs_app_router_best_practices), justify their use, discuss alternatives, and **seek user guidance** (see point 3). This includes significant deviations from established @prisma_best_practices or @trpc_best_practices.
        *   **5. Integration Points:**
            *   Detail how new components will interact with existing ones or external services.
        *   **6. Scalability, Performance, and Security Considerations:**
            *   **Performance:** Impact of Server/Client component choices on client bundle size and interactivity. Efficiency of data fetching and tRPC procedure design.
            *   **Caching:** Effectiveness of proposed caching strategies for data and rendered components.
            *   **Security:** Input validation (Zod for tRPC inputs on server-side). Authorization for protected tRPC procedures. Security of Server Actions if used (authorization checks within the action). Protection of environment variables.
        *   **7. Out of Scope for this Design / Future Considerations (Technical):**
            *   Technical aspects deferred or potential future technical enhancements related to this design.
        *   **8. Open Questions / Points for Discussion:**
            *   List any unresolved technical questions or areas needing further user input.

3.  **Decision Making & User Guidance:**
    *   If proposing significant architectural changes diverging from `docs/architecture.md`, or introducing new core technologies/libraries not listed in `docs/technical.md`, clearly present the rationale, alternatives considered, and **explicitly seek user guidance and approval** before finalizing these parts of the TDP.
    *   If technical ambiguities arise from the PRD that impact the design, list them in "Open Questions" and seek clarification.

4.  **Review and Iteration:**
    *   Present the draft TDP to the user for review.
    *   Incorporate feedback and iterate on the design until approved.

**Definition of Done for TDP Generation:**
*   A complete TDP document is created in `tasks/proposals/` following the specified structure and naming convention from @file_naming.
*   The TDP accurately reflects a viable high-level technical solution for the PRD, fully leveraging Next.js App Router capabilities (guided by @nextjs_app_router_best_practices) and the tRPC/Prisma stack.
*   Component strategies (Server/Client), data fetching via tRPC, and caching are clearly articulated in the context of the feature.
*   All major technical decisions have been justified, and user guidance has been sought and incorporated where necessary.
*   The TDP has been reviewed and approved by the user.
*   Inform the user that the TDP is complete and ready for the Lead Engineer / Agile Planner AI (LEAP-AI).

**Important Notes:**
*   You do **not** update `docs/architecture.md` or `docs/technical.md` directly. These documents reflect the *current built state* of the application. Your TDP *proposes changes* that, if implemented, will later lead to updates in those core documents (per @documentation_update).
*   Avoid overly detailed implementation specifics; focus on the architectural and design level. The LEAP-AI will break this down further.