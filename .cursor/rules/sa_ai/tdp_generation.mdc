---
description: 
globs: 
alwaysApply: false
---
# Technical Design Proposal (TDP) Generation (Next.js App Router Focused)

Your primary output is a Technical Design Proposal (TDP). This document details the high-level technical solution for the requirements in `docs/product_requirement_docs.md`. The TDP serves as the blueprint for the LEAP-AI. Adhere to @planning_principles.

**Procedure:**

1.  **Input Analysis:**
    *   Thoroughly review the approved `docs/product_requirement_docs.md`.
    *   Analyze `docs/architecture.md` and `docs/technical.md`.
    *   **Crucially, understand and apply principles from @nextjs_app_router_best_practices, @prisma_best_practices (if DB interaction), and @trpc_best_practices (for API design).**
    *   Review `app/src` for existing patterns and reusability, per @directory_structure.
    *   Consult @system_analysis for guidance on analysis.
    *   Use `@Docs [FrameworkName] [query]` for specific framework questions.

2.  **TDP Document Creation:**
    *   Create a new TDP file in the location specified by @directory_structure (`tasks/proposals/`) using the naming convention from @file_naming.
    *   The TDP must include the following sections:

        *   **1. Introduction:** Overview of the feature (link/summarize PRD) and TDP purpose.
        *   **2. Proposed Technical Solution:**
            *   **High-level description:** How the feature will be implemented within the Next.js App Router architecture, adhering to @nextjs_app_router_best_practices.
            *   **Component Strategy (Server vs. Client):** Per @nextjs_app_router_best_practices (Section A). Identify key UI components, specify Server/Client type. **Recommend/mandate specific ShadCN/UI components** as per `docs/technical.md`; justify custom components.
            *   **Architectural changes:** Detail new components/services. Illustrate with Mermaid diagrams if complex, showing interactions. Explain integration with `docs/architecture.md`.
            *   **Data Model Changes (Prisma):** Specify new models/fields per @prisma_best_practices (Section B).
            *   **API Design (tRPC):** Outline new/modified tRPC procedures (inputs, outputs, auth) per @trpc_best_practices (Sections C & D).
            *   **Data Fetching Strategy:** Describe data flow per @nextjs_app_router_best_practices (Section B), detailing tRPC usage by Server/Client components.
            *   **Caching Strategy (Data Layer):** Propose caching strategies per @nextjs_app_router_best_practices (Section C).
            *   **State Management:** Clarify state location per @nextjs_app_router_best_practices (Section A).
            *   **Forms and Mutations:** Propose form handling (Server Actions or client-side) per @nextjs_app_router_best_practices (Sections G & H).
            *   **Loading UI and Error Handling:** Outline use of `loading.js`/`error.js` per @nextjs_app_router_best_practices (Section E).
            *   **Key algorithms or logic flows.**
        *   **3. Impact on Existing System:** Identify affected modules/components.
        *   **4. Technology & Patterns:** Confirm adherence to `docs/technical.md` and core best practices. Justify new technologies/patterns and **seek user guidance** (see point 3).
        *   **5. Integration Points:** Detail interactions.
        *   **6. Scalability, Performance, and Security Considerations:** Address performance (Server/Client choices, tRPC/Prisma efficiency), caching, and security (input validation, tRPC/Server Action auth) per relevant best practices.
        *   **7. Out of Scope for this Design / Future Considerations (Technical):** Deferred technical aspects.
        *   **8. Open Questions / Points for Discussion:** List unresolved technical questions.

3.  **Decision Making & User Guidance:**
    *   If proposing significant architectural changes, new core technologies, or deviations from established best practices (@nextjs_app_router_best_practices, @prisma_best_practices, @trpc_best_practices), clearly present rationale, alternatives, and **explicitly seek user guidance and approval.**
    *   If technical ambiguities arise from the PRD, list them in "Open Questions."

4.  **Review and Iteration:** Present draft TDP for user review and iterate until approved.

**Definition of Done for TDP Generation:**
*   A complete TDP document created per @directory_structure and @file_naming.
*   TDP reflects a viable solution adhering to @nextjs_app_router_best_practices, @prisma_best_practices, and @trpc_best_practices.
*   Component strategies, data fetching, and caching are clearly articulated.
*   User guidance sought and incorporated where necessary.
*   TDP reviewed and approved by the user.
*   Inform user that TDP is ready for LEAP-AI.

**Important Notes:**
*   You do **not** update `docs/architecture.md` or `docs/technical.md` directly.
*   Focus on architectural/design level. LEAP-AI will detail tasks.