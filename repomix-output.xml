# AI-Assisted Development Workflow Guide (T3 Stack Aligned)

## 1. Introduction

Welcome to the AI-Assisted Development Workflow! This system is designed to leverage multiple AI personas to streamline project planning, design, implementation, and review for projects built with the **T3 Stack**. It emphasizes maintaining high standards for code quality and documentation, all while being orchestrated by you, the human developer.

**Your Role as the Human Orchestrator:**
You are the project lead, primary decision-maker, and the orchestrator of the AI team. You will:
*   Initiate each phase and AI role.
*   Provide essential input, context, and clarification.
*   Review and approve AI-generated artifacts (PRDs, TDPs, plans, code proposals).
*   Perform tasks AIs cannot, such as final Git operations, complex E2E testing, manual QA, and direct file system manipulation (including `prisma migrate dev`).
*   Curate and maintain the AI's guiding rules and knowledge base (`.cursor/` directory).

**Target Technology Stack (Opinionated - T3 Stack):**
This workflow is optimized for projects using:
*   **Frontend:** Next.js (App Router), React, TypeScript, Tailwind CSS
*   **Backend:** Node.js/TypeScript, tRPC, Prisma ORM
*   **Database:** PostgreSQL (or other Prisma-compatible databases as per T3 recommendations)
*   **Authentication:** NextAuth.js (as per T3 boilerplate)
*   **Environment Variables:** `@t3-oss/env-nextjs` (as per T3 boilerplate)
*   **Unit Testing:** Jest (or Vitest, as preferred by the project)
*   **Version Control:** Git (feature-branch workflow)
Refer to `docs/technical.md` (once generated) for project-specific details and your T3 Stack `create-t3-app` generated boilerplate (e.g., `t3-boilerplate/`).

## 2. Core Principles of the Workflow

*   **Phase-Driven Development:** A structured progression from idea to implemented feature.
*   **AI Role Specialization:** Each AI persona has a distinct focus (see section 3).
*   **Centralized Memory & Knowledge:** All project context, plans, and AI guidance reside in `docs/`, `tasks/`, and `.cursor/` respectively. Key files are interlinked using Cursor's `@filename` syntax.
*   **Test-Driven Development (TDD):** IE-AIs propose and write unit tests before or alongside implementation code, guided by @tdd.
*   **Adherence to T3 Best Practices:** AI rules and prompts are aligned with T3 Stack conventions (e.g., @prisma_best_practices, @trpc_best_practices are T3-aligned).
*   **Efficient Context Management:** Most rules in `.cursor/rules/` are set to `alwaysApply: false` to conserve context window. They are explicitly referenced by master prompts or human input when needed.
*   **Human-in-the-Loop:** You provide approvals, make critical decisions, and manage the overall flow.
*   **Living Documentation:** Project documents are continuously updated to reflect the current state, guided by @memory.

## 3. AI Roles & Invocation

Each AI role is invoked by providing its master prompt (from `prompts/master/`) to Cursor, typically as the **system prompt** when configuring a custom AI model/role within Cursor. You'll also provide any necessary context files (e.g., PRD, TDP, specific task files).

1.  **Product Manager AI (PM-AI)**
    *   **Master Prompt:** `prompts/master/pm_ai_master.md`
    *   **Responsibilities:** Elicits requirements, generates/updates `docs/product_requirement_docs.md` (@prd_generation), archives old PRDs.
    *   **Key Rules:** @prd_generation, @requirement_elicitation.
2.  **Solutions Architect AI (SA-AI)**
    *   **Master Prompt:** `prompts/master/sa_ai_master.md`
    *   **Responsibilities:** Analyzes PRD, designs high-level technical solution for the T3 Stack, generates Technical Design Proposal (TDP) in `tasks/proposals/`.
    *   **Key Rules:** @tdp_generation, @system_analysis (T3-aligned), @planning_principles, @prisma_best_practices, @trpc_best_practices.
3.  **Lead Engineer / Agile Planner AI (LEAP-AI)**
    *   **Master Prompt:** `prompts/master/leap_ai_master.md`
    *   **Responsibilities:** Creates/updates `tasks/epics_plan.md`, sprint plans (`tasks/sprints/sprint_[...].md`), detailed role-specific task lists (`be_tasks.md`, `fe_tasks.md`). Initializes `tasks/active_context.md`. Proposes Git branches. Proposes updates to `docs/architecture.md` & `docs/technical.md` post-merge.
    *   **Key Rules:** @planning (from `.cursor/rules/leap_ai/`), @active_context_management, @planning_principles, @git_workflow, @documentation_update, awareness of @prisma_best_practices & @trpc_best_practices for task definition.
4.  **Backend Engineer AI (BE-AI)**
    *   **Master Prompt:** `prompts/master/be_ai_master.md`
    *   **Responsibilities:** Implements backend tasks using tRPC, Prisma, NextAuth.js integration as per T3 Stack. Writes Jest unit tests. Proposes commits.
    *   **Key Rules:** @backend (T3-aligned), @common (IE-AI rule), @tdd, @implement_principles, @debug_procedures, @git_workflow, @prisma_best_practices (T3-aligned), @trpc_best_practices (T3-aligned).
5.  **Frontend Engineer AI (FE-AI)**
    *   **Master Prompt:** `prompts/master/fe_ai_master.md`
    *   **Responsibilities:** Implements frontend tasks using Next.js (App Router), React, Tailwind CSS. Integrates with tRPC client. Writes Jest unit tests for complex logic. Proposes commits.
    *   **Key Rules:** @frontend (T3-aligned), @common (IE-AI rule), @tdd, @implement_principles, @debug_procedures, @git_workflow, @trpc_best_practices (T3-aligned client-side).
6.  **Senior Review Engineer (SRE-Gemini - External LLM)**
    *   **System Instruction:** `prompts/master/sre_gemini_system_instruction.md` (Use this when interacting with Gemini or a similar capable LLM for review).
    *   **Responsibilities:** Reviews code for quality, adherence to T3 standards, correctness. Provides feedback for revisions.

## 4. Step-by-Step Development Workflow

**Phase 0: Project Setup (If New Project)**
1.  **You:** Create the base directory structure as per @directory_structure. Initialize a T3 Stack project using `pnpm create t3-app@latest` (or your preferred package manager) into a directory like `t3-boilerplate/`.
2.  **You:** Populate `.cursor/` with all rule files (`.mdc`) and `prompts/` with master/bootstrap prompts. Ensure rules intended for explicit reference have `alwaysApply: false` in their frontmatter.
3.  **You:** Invoke **PM-AI** using `prompts/bootstrap/pm_bootstrap.md` and your project idea.
    *   PM-AI creates initial `docs/product_requirement_docs.md` and placeholder docs.
4.  **You:** Review and approve PM-AI's output.
5.  **You:** Invoke **SA-AI** using `prompts/bootstrap/sa_bootstrap.md`.
    *   SA-AI creates initial `docs/technical.md` (reflecting T3 Stack), `docs/architecture.md` (for T3), and the first TDP.
6.  **You:** Review and approve SA-AI's output. Now proceed to Phase 1 for the first feature.

**Phase 1: Product Definition (New Feature or Iteration)**
1.  **You:** Provide a feature idea or update request to **PM-AI**.
2.  PM-AI: Elicits requirements, generates/updates `docs/product_requirement_docs.md`.
3.  **You:** Review and approve the PRD.

**Phase 2: Solution Architecture**
1.  **You:** Provide the approved PRD to **SA-AI**.
2.  SA-AI: Analyzes and generates a Technical Design Proposal (TDP) in `tasks/proposals/`, ensuring T3 Stack alignment.
3.  **You:** Review and approve the TDP.

**Phase 3: Detailed Planning (Sprint Setup)**
1.  **You:** Provide the approved TDP to **LEAP-AI**.
2.  LEAP-AI: Updates `tasks/epics_plan.md`. Creates a sprint plan and detailed task lists, considering T3 best practices for IE-AI tasks. Initializes `tasks/active_context.md`. Proposes a feature branch.
3.  **You:** Review and approve plans. Create the Git feature branch.

**Phase 4: Implementation (Sprint Execution)**
1.  **You:** Assign "Open" tasks to **BE-AI** / **FE-AI**.
2.  BE-AI/FE-AI:
    *   Understand task and T3 context.
    *   Follow TDD and T3-aligned implementation rules.
    *   Propose commits.
    *   If BE-AI tasks involve schema changes, it will note the necessary `prisma/schema.prisma` modifications for you to apply and then run `pnpm db:generate` (or equivalent `prisma migrate dev`).
3.  **You:** Execute Git commits, run migrations if needed, and push the feature branch.
4.  Repeat for all tasks.

**Phase 5: Code Review**
1.  **You:** When a feature is substantially complete, prepare for review by **SRE-Gemini**.
2.  **You:** Interact with SRE-Gemini, providing code and T3-specific context (e.g., relevant snippets from @prisma_best_practices, @trpc_best_practices).
3.  SRE-Gemini: Provides review feedback against T3 standards.
4.  **You & SRE-Gemini:** Agree on changes and formulate revision tasks.
5.  **You:** Update IE-AI task files. Loop back to Phase 4 for revisions.

**Phase 6: QA & Merge**
1.  **You:** Perform manual QA and E2E testing.
2.  **You:** If QA passes, merge the feature branch into `main`.

**Phase 7: Post-Merge Documentation Update**
1.  **You:** Task **LEAP-AI** to propose updates for `docs/architecture.md` and `docs/technical.md`.
2.  **You:** Review and manually update the official documents.

## 5. Key Memory Files Overview

A comprehensive map is in @memory. Key T3-aligned rules include:
*   `.cursor/rules/core/prisma_best_practices.mdc`
*   `.cursor/rules/core/trpc_best_practices.mdc`
*   `.cursor/rules/ie_ai/backend.mdc`
*   `.cursor/rules/ie_ai/frontend.mdc`
*   `.cursor/rules/sa_ai/system_analysis.mdc` (T3-aware)

Refer to the T3 Stack documentation (provided as `T3 Stack Docs` context) and your project's `t3-boilerplate/` for specific implementation details.

## 6. Integrating into an Existing T3 Project

1.  **Setup:** Copy `.cursor/` and `prompts/` into your project. Create `docs/`, `tasks/` if needed.
2.  **Baseline Documentation:**
    *   Use **PM-AI** to document existing features into `docs/product_requirement_docs.md`.
    *   Use **SA-AI** to analyze your T3 codebase and generate initial `docs/architecture.md` and `docs/technical.md`. This requires significant human guidance.
3.  **Start Small:** Apply the workflow to a new, well-contained feature.
4.  **Adapt Rules:** Modify `.cursor/rules/` (especially @directory_structure and IE-AI rules) to fit any project-specific conventions on top of T3, using @rule_update_procedure.

## 7. Maintaining the System

*   **Rule Updates:** Review and apply AI-suggested rule changes (@rule_update_procedure) to keep the system effective and T3-aligned.
*   **Knowledge Capture:** Curate suggestions for @lessons_learned and @error_documentation.
*   **Context Management:** Remember that most rules are `alwaysApply: false`. You or the master prompts must explicitly include them via `@` symbols in Cursor when they are relevant to the AI's current task.

This AI-assisted workflow, tailored for the T3 Stack, aims to be a powerful co-pilot. Consistent application of these processes and diligent human oversight will lead to efficient and high-quality development.